#+title: Emacs Configuration
#+author: Randy Ridenour
#+DATE: Time-stamp: <Last changed 2025-06-05 18:00:49 by rlridenour>
#+email: rlridenour@fastmail.com
#+PROPERTY: header-args :tangle init.el
#+auto_tangle: t

* Early Init File
:PROPERTIES:
:header-args: :tangle early-init.el
:END:

** Header

Set the header and prevent package initialization.

#+begin_src emacs-lisp
  ;; early-init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :lexical t
  (setq package-enable-at-startup nil)
  (setq inhibit-default-init nil)
#+end_src



** Personal Identification

Set my name and email.

#+begin_src emacs-lisp
  (setq user-full-name "Randy Ridenour"
	user-mail-address "rlridenour@fastmail.com")
#+end_src

** UI

*** Clean Up UI

Remove unnecessary GUI elements.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (setq-default frame-inhibit-implied-resize t)
  (setq-default inhibit-startup-screen t)
  (setq-default inhibit-startup-message t)
  (setq-default initial-scratch-message nil)
  (setq use-dialog-box nil)
#+end_src


Silence warning bells.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Make scrolling smoother.

#+begin_src emacs-lisp
  (setq scroll-conservatively 10
	scroll-margin 0)
#+end_src

*** Initial Frame

Set initial frame size to fullheight.

#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Bring new frame to front. From [[https://www.reddit.com/r/emacs/comments/1g2hkh8/a_useful_snippet_to_bring_emacs_client_to_the/][a useful snippet to bring emacs client to the front on OS X : r/emacs]].

#+begin_src emacs-lisp
  (defun initd/bring-emacs-to-front ()
    "Using applescript, force the Emacs frame to be activated."
    (when (eq system-type 'darwin)
      (start-process "bring-emacs-to-front" nil
		     "osascript"
		     "-e"
		     "tell application \"Emacs\" to activate")))
  (add-hook 'server-after-make-frame-hook #'initd/bring-emacs-to-front)
#+end_src

Set the frame title format.

#+begin_src emacs-lisp
  (setq-default cursor-in-non-selected-windows nil
		frame-title-format '("%f [%m]"))
#+end_src

Set window title to file name.

#+begin_src emacs-lisp
  (setq frame-title-format
	'(buffer-file-name (:eval (abbreviate-file-name buffer-file-name))
			   (dired-directory dired-directory
					    "%b")))
#+end_src

Focus new frames

#+begin_src emacs-lisp
  (defun rr/focus-new-client-frame ()
    (select-frame-set-input-focus (selected-frame)))
  (add-hook 'server-after-make-frame-hook #'rr/focus-new-client-frame)
#+end_src

** Font

Set font to Apple's San Francisco

#+begin_src emacs-lisp
  ;; Main typeface
  (set-face-attribute 'default nil :family "SF Mono" :height 160 :weight 'medium)
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "SF Pro Text" :height 1.0 :weight 'medium)
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "SF Mono" :height 1.0 :weight 'medium)
#+end_src

Increase font size.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 160)
#+end_src

Add some space between lines.

#+begin_src emacs-lisp
  (setq-default line-spacing 0.25)
#+end_src

** Footer

#+begin_src emacs-lisp
  ;; Local Variables:
  ;; no-byte-compile: t
  ;; no-native-compile: t
  ;; no-update-autoloads: t
  ;; End:
#+end_src

* Preliminaries

Enable lexical bindings in the exported Emacs Lisp file.

#+begin_src emacs-lisp
  ;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Require Package

#+begin_src emacs-lisp
(require 'package)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
;; keep the installed packages in .emacs.d
(setq package-user-dir (expand-file-name "elpa" user-emacs-directory))
(package-initialize)
;; update the package metadata is the local cache is missing
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

Always ensure declared packages.

#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src


** Org Auto Tangle

Use ~org-auto-tangle~ to generate ~early-init.el~ and ~init.el~ whenever ~README.org~ is saved.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure
    :hook (org-mode . org-auto-tangle-mode))
#+end_src



** User Information

#+begin_src emacs-lisp
      (setq user-full-name "Randy Ridenour")
      (setq user-mail-address "rlridenour@fastmail.com")
#+end_src



** Customize

** Custom Variables

Keep custom-set variables separate from configuration file.

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
#+end_src


#+begin_src emacs-lisp
  (recentf-mode)
    (setopt recentf-max-menu-items 1000
    recentf-max-saved-items 1000)

#+end_src



Use =C-x c= to kill Emacs.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x c") #'save-buffers-kill-emacs)
#+end_src


* File Locations
** Set Path

Use Exec-Path-From-Shell to set path.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :vc (:url "https://github.com/purcell/exec-path-from-shell"
  	    :branch "master")
    :ensure
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Variables

#+begin_src emacs-lisp
  (defconst rr-emacs-dir (expand-file-name user-emacs-directory)
    "The path to the emacs.d directory.")

  (defconst rr-cache-dir "~/.cache/emacs/"
    "The directory for Emacs activity files.")

  (defconst rr-backup-dir (concat rr-cache-dir "backup/")
    "The directory for Emacs backup files.")

  (defconst rr-org-dir "/Users/rlridenour/Library/Mobile Documents/com~apple~CloudDocs/org/"
    "The directory for my org files.")

  (defconst rr-agenda-dir "/Users/rlridenour/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"
    "The directory for RR-Emacs note storage.")

  (defconst rr-notes-dir "/Users/rlridenour/Library/Mobile Documents/com~apple~CloudDocs/Documents/notes/"
    "The directory for RR-Emacs note storage.")
#+end_src

** Create directories

#+begin_src emacs-lisp
    ;;;; Create directories if non-existing
  (dolist (dir (list rr-cache-dir
		     rr-backup-dir))
    (unless (file-directory-p dir)
      (make-directory dir t)))
#+end_src

** Elisp

Add elisp directory to load path.

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat rr-emacs-dir "elisp"))
#+end_src

** Backups

Backup files are in ~/Users/rlridenour/.cache/emacs/backup/~.

#+begin_src emacs-lisp
  (setq backup-directory-alist (list (cons "."  rr-backup-dir)))
#+end_src

Always backup by copying.

#+begin_src emacs-lisp
  (setq backup-by-copying t)
#+end_src

Delete old backup files

#+begin_src emacs-lisp
  (setq delete-old-versions t)
#+end_src

Keep 5 backup files

#+begin_src emacs-lisp
  (setq kept-new-versions 5)
#+end_src

Make numeric backup versions

#+begin_src emacs-lisp
  (setq version-control t)
#+end_src

Do not automatically save files.

#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src

Don't make all those files that look like =#foo.ext=.

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Bookmarks

#+begin_src emacs-lisp
    (require 'bookmark)
    (bookmark-bmenu-list)
    (setq bookmark-save-flag 1)
#+end_src

** Trash

Send deleted files to an Emacs folder in system trash.

#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t
	trash-directory "~/.Trash/emacs")
#+end_src

** Open Config

*** Emacs Config

Open Emacs init file in fixed-pitch mode.

#+begin_src emacs-lisp
  (defun rr/open-init-file ()
    (interactive)
    (progn (find-file "~/.config/emacs/init.org")
	   (variable-pitch-mode -1)))
#+end_src

*** Fish Functions

Open fish functions directory.

#+begin_src emacs-lisp
  (defun open-fish-functions ()
    (interactive)
    (dired "~/.config/fish/functions"))
#+end_src


* Appearance

** Modus Themes

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure
    :demand
    :config
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
  	  modus-themes-mixed-fonts t
  	  modus-themes-variable-pitch-ui t
  	  modus-themes-italic-constructs t
  	  modus-themes-bold-constructs t)

    ;; Maybe define some palette overrides, such as by using our presets
    (setq modus-themes-common-palette-overrides
  	  modus-themes-preset-overrides-faint)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi t)
    :bind
    ("<f9>" . #'modus-themes-rotate))
#+end_src

** Font

#+begin_src emacs-lisp
  ;; Main typeface
  (set-face-attribute 'default nil :family "SF Mono" :height 160 :weight 'medium)
  ;; Proportionately spaced typeface
  (set-face-attribute 'variable-pitch nil :family "SF Pro Text" :height 1.0 :weight 'medium)
  ;; Monospaced typeface
  (set-face-attribute 'fixed-pitch nil :family "SF Mono" :height 1.0 :weight 'medium)
#+end_src



** Ace Window

#+begin_src emacs-lisp
    (use-package ace-window
      :ensure
      :config
  (setq aw-dispatch-always t)
      :bind
      (("M-O" . #'ace-window)
       ("M-o" . #'rlr/quick-window-jump)))
    #+end_src

#+begin_src emacs-lisp
(defun rlr/quick-window-jump ()
"If only one window, switch to previous buffer, otherwise call ace-window."
    (interactive)
    (let* ((window-list (window-list nil 'no-mini)))
      (if (< (length window-list) 3)
	  ;; If only one window, switch to previous buffer. If only two, jump directly to other window.
	  (if (one-window-p)
	  (switch-to-buffer nil)
	(other-window 1))
	(ace-window t))))
#+end_src



* Completion

** Vertico

#+begin_src emacs-lisp :lexical t
  (use-package vertico
    :demand
    :custom (vertico-cycle t)
    :config
    (setf (car vertico-multiline) "\n") ;; don't replace newlines
    (vertico-mode)
    ;; (setq vertico-multiform-commands
    ;;  '((consult-line
    ;;       posframe
    ;;       (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
    ;;       (vertico-posframe-border-width . 10)
    ;;       ;; NOTE: This is useful when emacs is used in both in X and
    ;;       ;; terminal, for posframe do not work well in terminal, so
    ;;       ;; vertico-buffer-mode will be used as fallback at the
    ;;       ;; moment.
    ;;       (vertico-posframe-fallback-mode . vertico-buffer-mode))
    ;;      (t posframe)))
    (vertico-multiform-mode 1)
    (setq vertico-multiform-categories
  	  '((file grid)
  	    ;; (jinx grid (vertico-grid-annotate . 20))
  	    ;; (citar buffer)
  	    )
  	  )
    (setq vertico-cycle t) ;; enable cycling for 'vertico-next' and 'vertico-prev'
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
    :bind
    (:map vertico-map
  	      ;; keybindings to cycle through vertico results.
  	      ("C-h" . #'+minibuffer-up-dir)
  	      ("<backspace>" . #'vertico-directory-delete-char)
  	      ("RET" . #'vertico-directory-enter)))
#+end_src


** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src


** Marginalia

Enrich existing commands with completion annotations

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure
    :config (marginalia-mode))
#+end_src


** Consult

#+begin_src emacs-lisp
  (use-package consult
    :ensure
    :demand
    :bind
    (("C-x b" . #'consult-buffer)
     ("s-f" . #'consult-line)
    ("s-r" . #'consult-buffer)
    ("M-y" . #'consult-yank-pop)))
#+end_src

Some functions to use with Consult.

#+begin_src emacs-lisp
    (defun rlr/consult-rg ()
      "Function for consult-ripgrep with the universal-argument."
      (interactive)
      (consult-ripgrep (list 4)))

    (defun rlr/consult-fd ()
      "Function for consult-find with the universal-argument."
      (interactive)
      (consult-find (list 4)))
#+end_src


** Embark

#+begin_src emacs-lisp
  (use-package embark
    :ensure
    :bind
    (("C-." . #'embark-act)
     ("C-S-a" . #'embark-act)
     ("C-:" . #'embark-dwim)
     ("C-h B" . #'embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
  		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
  		   nil
  		   (window-parameters (mode-line-format . none)))))
#+end_src

#+begin_src emacs-lisp
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Cape

#+begin_src emacs-lisp
  (use-package cape
    :commands (cape-file)
    :bind 
		      (("M-p p" . #'completion-at-point) ;; capf
		      ("M-p d" . #'cape-dabbrev)        ;; or dabbrev-completion
		      ("M-p a" . #'cape-abbrev)
		      ("M-p w" . #'cape-dict)
		      ("M-p \\" . #'cape-tex)
		      ("M-p _" . #'cape-tex)
		      ("M-p ^" . #'cape-tex))
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-history)
    )
#+end_src

** Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    :config
    (global-corfu-mode))
#+end_src

** Abbrev

#+begin_src emacs-lisp
(set-default 'abbrev-mode t)
    (load "~/Dropbox/emacs/my-emacs-abbrev")
#+end_src

** Snippets

*** Yasnippet

YASnippet is a template system for Emacs.

https://github.com/joaotavora/yasnippet

#+begin_src emacs-lisp :lexical t
  (use-package yasnippet
    :config
    :custom
    (yas-snippet-dirs '("~/.config/emacs/snippets"))
        (yas-global-mode 1))
#+end_src

*** Yankpad

#+begin_src emacs-lisp
  (use-package yankpad
    :ensure
    :init
    (setq yankpad-file "~/Library/Mobile Documents/com~apple~CloudDocs/org/yankpad.org")
    :bind
    (("<f6>" . #'yankpad-insert)))
#+end_src

*** AAS

#+begin_src emacs-lisp :tangle no
  (use-package aas)
#+end_src

**** LAAS

#+begin_src emacs-lisp :tangle no
  (use-package laas
    :after auctex
    :hook
    (LaTeX-mode . laas-mode))
#+end_src



* Settings
** Miscellaneous

UTF-8 as default.

#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+end_src

Use single space after sentences.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

Set default tab width to 10.

#+begin_src emacs-lisp
  (setq-default tab-width 10)
#+end_src

Use GNU =ls= to avoid "Listing directory failed but 'access-file' worked" error.

#+begin_src emacs-lisp
  (setq insert-directory-program "gls")
#+end_src

Kill message buffer on exit.

#+begin_src emacs-lisp
  (setq message-kill-buffer-on-exit t)
#+end_src

Use "y" and "n" in confirmation dialogues.

#+begin_src emacs-lisp
  (setf use-short-answers t)
#+end_src

Set Mac right command key as Emacs hyper key. I was using the fn key, but there were two problems. First, the fn key with A, F, H, E, C, N, and Q are used by the system. Second, on the new magic keyboard, the left control key is small and right by the fn key which I seem to always be reaching for. So, I remapped the fn key to control on the magic keyboard with Karabiner Elements.

#+begin_src emacs-lisp
  (setopt ns-right-command-modifier 'hyper)
#+end_src

Allow entering a command when the minibuffer is active.

#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
#+end_src

Open links in default Mac browser.

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+end_src

World clock settings.

#+begin_src emacs-lisp
  (setq world-clock-list
	'(
	  ("America/Chicago" "Oklahoma City")
	  ("America/Los_Angeles" "Seattle")
	  ("Pacific/Honolulu" "Honolulu")
	  ("America/New_York" "New York")
	  ("Etc/UTC" "UTC")))

  (setq world-clock-time-format "%a, %d %b %R %Z")

  (setq calendar-location-name "Norman, OK"
	calendar-latitude 35.24371
	calendar-longitude -97.416797
	calendar-mark-holidays-flag t        ;colorize holidays in the calendar
	holiday-bahai-holidays nil           ;these religions have MANY holidays
	holiday-islamic-holidays nil         ;... that I don't get off
	)

  (global-set-key (kbd "<f8>") #'calendar)
#+end_src

Display line and column numbers in the modeline.

#+begin_src emacs-lisp
  (line-number-mode)
  (column-number-mode)
#+end_src

Wrap lines to fit frame size.

#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

Highlight current line, but only in the current window.

#+begin_src emacs-lisp
  (global-hl-line-mode)
  (setq hl-line-sticky-flag nil)
  (setq global-hl-line-sticky-flag nil)
#+end_src

Show 24 hour time in the modeline.

#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode)
#+end_src

Silence warning bells.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Use MacOS SF Symbols

#+begin_src emacs-lisp :tangle no
  (when (memq system-type '(darwin))
    (set-fontset-font t nil "SF Pro Display" nil 'append))
#+end_src

Set server to use tcp for [[http://yummymelon.com/scrim/][Scrim]]

#+begin_src emacs-lisp
  (setq server-use-tcp t)
  (server-start)
  (require 'org-protocol)
#+end_src

Auto insert close bracket.

#+begin_src emacs-lisp :tangle no
  (electric-pair-mode 1)
#+end_src

Immediately highlight matching pairs of parentheses and quotes.

#+begin_src emacs-lisp
  (show-paren-mode)
  (setq show-paren-delay 0)
#+end_src

Save minibuffer history.

#+begin_src emacs-lisp
(setq history-length 25)
(savehist-mode 1)
#+end_src





** Footer

#+begin_src emacs-lisp
  ;; Local Variables:
  ;; no-byte-compile: t
  ;; no-native-compile: t
  ;; no-update-autoloads: t
  ;; End:
#+end_src
